{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","streetAddress","city","zip","change","e","_this","setState","Object","defineProperty","target","name","value","onSubmit","preventDefault","props","_this2","this","react_default","a","createElement","className","htmlFor","id","type","placeholder","onChange","defaultValue","onClick","React","Component","App","fields","apiData","fetch","split","join","then","results","json","data","properties","Form_Form","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43f744d5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nexport default class Form extends React.Component {\n    state = {\n        streetAddress: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n    }\n\nchange = (e) => {\n    this.setState({\n        [e.target.name]: e.target.value\n    })\n}\n\nonSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState({\n        streetAddress: \"\",\n        city: \"\",\n        state: \"\",\n        zip: \"\",\n    })\n}\n\nrender() {\n    return (\n        \n        <form className=\"myForm\">\n            <div className=\"form-group\">\n                <label htmlFor=\"inputAddress\">Address</label>\n                <input\n                    id=\"inputAddress\" type=\"text\" className=\"form-control\" name=\"streetAddress\"\n                    placeholder= '111 Main St'\n                    value={this.state.streetAddress} \n                    onChange={e => this.change(e)}\n                />\n            </div>\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputCity\">City</label>\n                    <input\n                        id=\"inputCity\" type=\"text\" className=\"form-control\"\n                        name=\"city\"\n                        placeholder= 'City'\n                        value={this.state.city}\n                        onChange={e => this.change(e)}\n                    />\n                </div>\n                <div className=\"form-group col-md-4\">\n                    <label htmlFor=\"inputState\">State</label>\n                    <select id=\"inputState\" className=\"form-control\"\n                        name=\"state\"\n                        value={this.state.state}\n                        onChange={e => this.change(e)}\n                    >\n                        <option defaultValue>Choose...</option>\n                        <option value=\"AL\">Alabama</option>\n                        <option value=\"AK\">Alaska</option>\n                        <option value=\"AZ\">Arizona</option>\n                        <option value=\"AR\">Arkansas</option>\n                        <option value=\"CA\">California</option>\n                        <option value=\"CO\">Colorado</option>\n                        <option value=\"CT\">Connecticut</option>\n                        <option value=\"DE\">Delaware</option>\n                        <option value=\"DC\">District of Columbia</option>\n                        <option value=\"FL\">Florida</option>\n                        <option value=\"GA\">Georgia</option>\n                        <option value=\"HI\">Hawaii</option>\n                        <option value=\"ID\">Idaho</option>\n                        <option value=\"IL\">Illinois</option>\n                        <option value=\"IN\">Indiana</option>\n                        <option value=\"IA\">Iowa</option>\n                        <option value=\"KS\">Kansas</option>\n                        <option value=\"KY\">Kentucky</option>\n                        <option value=\"LA\">Louisiana</option>\n                        <option value=\"ME\">Maine</option>\n                        <option value=\"MD\">Maryland</option>\n                        <option value=\"MA\">Massachusetts</option>\n                        <option value=\"MI\">Michigan</option>\n                        <option value=\"MN\">Minnesota</option>\n                        <option value=\"MS\">Mississippi</option>\n                        <option value=\"MO\">Missouri</option>\n                        <option value=\"MT\">Montana</option>\n                        <option value=\"NE\">Nebraska</option>\n                        <option value=\"NV\">Nevada</option>\n                        <option value=\"NH\">New Hampshire</option>\n                        <option value=\"NJ\">New Jersey</option>\n                        <option value=\"NM\">New Mexico</option>\n                        <option value=\"NY\">New York</option>\n                        <option value=\"NC\">North Carolina</option>\n                        <option value=\"ND\">North Dakota</option>\n                        <option value=\"OH\">Ohio</option>\n                        <option value=\"OK\">Oklahoma</option>\n                        <option value=\"OR\">Oregon</option>\n                        <option value=\"PA\">Pennsylvania</option>\n                        <option value=\"RI\">Rhode Island</option>\n                        <option value=\"SC\">South Carolina</option>\n                        <option value=\"SD\">South Dakota</option>\n                        <option value=\"TN\">Tennessee</option>\n                        <option value=\"TX\">Texas</option>\n                        <option value=\"UT\">Utah</option>\n                        <option value=\"VT\">Vermont</option>\n                        <option value=\"VA\">Virginia</option>\n                        <option value=\"WA\">Washington</option>\n                        <option value=\"WV\">West Virginia</option>\n                        <option value=\"WI\">Wisconsin</option>\n                        <option value=\"WY\">Wyoming</option>\n                        <option value=\"WY\">Other</option>\n                    </select>\n                </div>\n                <div className=\"form-group col-md-2\">\n                    <label htmlFor=\"inputZip\">Zip</label>\n                    <input\n                        id=\"inputZip\" type=\"text\" className=\"form-control\"\n                        name=\"zip\"\n                        placeholder= 'ZIP'\n                        value={this.state.zip}\n                        onChange={e => this.change(e)}\n                    />\n                </div>\n            </div>\n            \n            <div className=\"col text-center\">\n                <button type=\"submit\" className=\"btn btn-success\" onClick={e => this.onSubmit(e)}>Submit Your Address</button>\n            </div>\n        </form>\n        \n    );\n}\n}","import React, {Component} from 'react';\nimport Form from './Form';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\n\nclass App extends Component {\n    \n    state = {\n        fields: {\n            streetAddress: \"123 Main Street\",\n            city: \"Crouse\",\n            state: \"NC\",\n            zip: \"28021\",\n        },\n        apiData: {},\n    };\n    \n    onSubmit = fields => {\n        this.setState({\n                fields: fields,\n        })\n\n        var APIKey = \"cqgXnRvmevXw6LU3DQswQrv3ExcmL4\";\n        fetch(\"https://api.estated.com/property/v3?token=\"+APIKey+\"&address=\"+fields.streetAddress.split(' ').join('+')+\"&city=\"+fields.city+\"&state=\"+fields.state+\"&zipcode=\"+fields.zip+\"\")\n        .then(results => {\n            return results.json();\n        }).then(data => {\n            this.setState({\n                apiData: data.properties,\n            })\n        });\n        \n    };\n    \n    render() {\n        return (\n            <div className=\"container\">\n                <h3>Please Submit Address: </h3>\n                <div></div>\n                <Form onSubmit={fields => this.onSubmit(fields)} className=\"form\"/>\n                <h4>Your Submitted Address: </h4>\n                <div className=\"subAddress\">\n                    <p>{this.state.fields.streetAddress}</p>\n                    <p>{this.state.fields.city + \", \" + this.state.fields.state + \" \" + this.state.fields.zip}</p>\n                </div>\n\n                <h4>Your Property Response: </h4>\n                <div className=\"propertyResponse\">\n                    <p>{JSON.stringify(this.state.apiData, null, 2)}</p>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}